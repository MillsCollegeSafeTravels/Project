package edu.mills.cs180.safetravels;

import java.util.Random;

import android.app.ListActivity;
import android.database.Cursor;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

/**
 * Allows the user to view the crimes located within a 3 block radius of a location as a list 
 * displaying the crime type names and the number of crimes in each category.
 * 
 * @author Kate Feeny
 * @author Jess Martin
 * @author TeAirra Ward
 * @author Jodessa Lanzadares
 * @author Dani E-F
 *
 */
public class CrimesListActivity extends ListActivity {
	
	/**
	 * An integer holding the first menu item's id.
	 */
	public static final int SHOW_MAP_ID = Menu.FIRST;

	/**
	 * An integer holding the highest value generated by a random int generator. Used for testing 
	 * the concatenation of crime type names with count values.
	 */
	private static final int END = 25; //for demo purposes

	/**
	 * A CrimeDbAdapter for database actions.
	 */
	private CrimeDbAdapter mDbHelper;

	/**
	 * A default CharSequence for selected list items.
	 */
	private CharSequence defaultItemMsg = "Will load layout of activity for "
		+ "type of crime selected.";
	
	/**
	 * A default CharSequence for selected menu item.
	 */
	private CharSequence defaultMenuMsg = "Will take to map view with crimes "
		+ "shown.";

	/**
	 * Called when the activity is starting. Opens the crimes database and creates the ListView.
	 * 
	 * @param savedInstanceState if the activity is being re-initialized after previously being 
	 * shut down then this Bundle contains the data it most recently supplied in 
	 * onSaveInstanceState(Bundle). Note: Otherwise it is null.
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mDbHelper = new CrimeDbAdapter(this);
		mDbHelper.open();
		//TODO: replace below method with method to populate with real data
		//enterTestingData(mDbHelper);
		
		String[] crimeNames = getResources().getStringArray(R.array.crimes_array);
		String[] crimesAndCount = addCounts(crimeNames);
		
		setListAdapter(new ArrayAdapter<String>(this, R.layout.crime_row, crimesAndCount));

		ListView lv = getListView();
		lv.setTextFilterEnabled(true);

		//TODO: Change to load a layout file for new Activity w/ list of types
		//of crime selected
		lv.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				showDefaultMsg(defaultItemMsg);
			}
		});
	}//onCreate

	/**
	 * Allows the menu to appear when the device's menu button is pressed.
	 * 
	 * @param menu the Menu to appear
	 * @return the result of calling the super method
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		boolean result = super.onCreateOptionsMenu(menu);
		menu.add(0, SHOW_MAP_ID, 0, R.string.menu_see_on_map);
		return result;
	}//onCreateOptionsMenu

	/**
	 * Would start an activity when a menu item is selected. The activity that would be started 
	 * would show a list of the crimes of the type selected. As of now, it calls showDefaultMsg 
	 * with the default menu message.
	 * 
	 * @param item the MenuItem that was selected
	 * @return true if the selected item was show map and the activity starts with no errors, 
	 * otherwise returns the result of calling the super method
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case SHOW_MAP_ID:
			showDefaultMsg(defaultMenuMsg);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}//onOptionsItemSelected

	/**
	 * Creates a Toast displaying the given text.
	 * 
	 * @param msg the CharSequence text to be displayed
	 */
	private void showDefaultMsg(CharSequence msg) {
		// When clicked, show a toast with the default text
		Toast.makeText(getApplicationContext(), msg,
				Toast.LENGTH_SHORT).show();
	}//showDefaultMsg

	/**
	 * Adds the number of crimes for each type and concatenates it with the crime type name.
	 * 
	 * @param theCrimeNames an array of the names of the various crime types
	 * @return a String array of crime type names and the counts
	 */
	private String[] addCounts(String[] theCrimeNames) {
		/*TODO:put back in
		 * int j;
		 * for(int i=0;i<crimes.length;i++){
            Cursor c = mDbHelper.fetchByType(crimes[i]);
            c.moveToFirst();
            j = c.getCount();
            c.close();
            crimesAndCount[i] = crimes[i] + "(" + j +")";
    	}*/
		
		//for demo purposes
		String[] temp = new String[CrimeData.CRIME_NUMBER];
		Random random = new Random();
		for(int i=0;i<CrimeData.CRIME_NUMBER;i++){
			temp[i] = theCrimeNames[i] + " (" + random.nextInt(END) + ")";
		}
		return temp;
	}//addCounts

	/**
	 * Calls CrimeData's enterTestData. For testing purposes, it passes its CrimeDbAdapter to 
	 * CrimeData so CrimeData can enter crimes into the database.
	 * 
	 * @param adapter the CrimeDbAdapter for adding to the database
	 */
	private void enterTestingData(CrimeDbAdapter adapter) {
		CrimeData.enterTestData(adapter);
	}//enterTestingData

}//CrimesListActivity
